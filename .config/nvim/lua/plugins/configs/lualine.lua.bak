local colors = {
    red = "#ca1243",
    grey = "#a0a1a7",
    black = "#383a42",
    white = "#f3f3f3",
    light_green = "#007708",
    orange = "#fe8019",
    orange1 = "#FAB005",
    orange2 = "FF7000",
    green = "#8ec07c",
    dark_green = "#196F3D",
    ----
    yellow = "#FFFF00",
    nord1 = "#2E3440",
    nord2 = "#3B4252",
    nord3 = "#434C5E",
    nord4 = "#4C566A",
    seagreen = "#93E9BE",
    git_add_green = "D7FFAF",
    git_replace_blue = "#7AA6DA",
    git_delete_red = "E95678"
}

local theme = {
    normal = {
        -- a = { fg = colors.white, bg = colors.nord1 },
        -- b = { fg = colors.white, bg = colors.nord1 },
        -- c = { fg = colors.white, bg = colors.nord1 },
        -- z = { fg = colors.white, bg = colors.nord1 }
        a = { fg = colors.white, bg = colors.nord3 },
        b = { fg = colors.white, bg = colors.nord2 },
        c = { fg = colors.white, bg = colors.nord3 },
        z = { fg = colors.white, bg = colors.nord2 }
    },
    insert = { a = { fg = colors.black, bg = colors.git_add_green } },
    visual = { a = { fg = colors.black, bg = colors.orange } },
    replace = { a = { fg = colors.black, bg = colors.red } }
}

local function search_result()
    if vim.v.hlsearch == 0 then
        return ""
    end
    local last_search = vim.fn.getreg("/")
    if not last_search or last_search == "" then
        return ""
    end
    local searchcount = vim.fn.searchcount { maxcount = 9999 }
    return last_search .. "(" .. searchcount.current .. "/" .. searchcount.total .. ")"
end

local function modified()
    if vim.bo.modified then
        return "+"
    elseif vim.bo.modifiable == false or vim.bo.readonly == true then
        return "-"
    end
    return ""
end

require("lualine").setup {
    options = {
        theme = 'nord',
        icons_enabled = false,
        component_separators = { left = "", right = "" },
        section_separators = { left = "", right = "" }
    },
    -- sections = process_sections {
    sections = {
        lualine_a = {
            {
                "mode",
                color = { fg = colors.grey }
                -- fmt = function(str)
                --   return str:sub(1, 1)
                -- end
            }
        },
        lualine_b = {
            {
                "branch",
                color = { fg = colors.grey, bg = colors.nord1 }
            },
            {
                "diff",
                colored = true, -- Displays a colored diff status if set to true
                symbols = { added = "+", modified = "~", removed = "-" }, -- Changes the symbols used by the diff.
                diff_color = {
                    added = { fg = colors.git_add_green1, bg = colors.nord1 },
                    modified = { fg = colors.git_replace_blue, bg = colors.nord1 },
                    removed = { fg = colors.git_delete_red, bg = colors.nord1 }
                }
            },
            {
                "diagnostics",
                source = { "nvim", "nvim_diagnostic", "coc" },
                -- sections = {"error", "warn", "info", "hint"},
                diagnostics_color = {
                    error = { bg = colors.nord1, fg = colors.red },
                    warn = { bg = colors.nord1, fg = colors.orange2 },
                    info = { bg = colors.nord1, fg = colors.orange1 },
                    hint = { bg = colors.nord1, fg = colors.light_green }
                },
                -- diagnostics_color = {
                --   error = "DiagnosticError",
                --   warn = "DiagnosticWarn",
                --   info = "DiagnosticInfo",
                --   hint = "DiagnosticHint"
                -- },
                symbols = { error = "E", warn = "W", info = "I", hint = "H", debug = "D" },
                colored = true, -- Displays diagnostics status in color if set to true.
                always_visible = true, -- Show diagnostics even if there are none.
                -- update_in_insert = true -- Update diagnostics in insert mode.
            },
            -- {
            --   "buffers",
            --   show_filename_only = true, -- Shows shortened relative path when set to false.
            --   show_modified_status = true, -- Shows indicator when the buffer is modified.
            --   mode = 2, -- 0: Shows buffer name
            --   -- 1: Shows buffer index (bufnr)
            --   -- 2: Shows buffer name + buffer index (bufnr)
            --
            --   max_length = vim.o.columns * 2 / 3, -- Maximum width of buffers component,
            --   -- it can also be a function that returns
            --   -- the value of `max_length` dynamically.
            --   filetype_names = {
            --     TelescopePrompt = "Telescope",
            --     dashboard = "Dashboard",
            --     packer = "Packer",
            --     fzf = "FZF",
            --     alpha = "Alpha"
            --   }, -- Shows specific buffer name for that filetype ( { `filetype` = `buffer_name`, ... } )
            --   buffers_color = {
            --     -- Same values as the general color option can be used here.
            --     active = "lualine_{section}_normal", -- Color for active buffer.
            --     inactive = "lualine_{section}_inactive" -- Color for inactive buffer.
            --   }
            -- },
            -- {"filename", file_status = false, path = 2},
            { modified, color = { bg = colors.nord1, fg = colors.red } },
            {
                "%w",
                cond = function()
                    return vim.wo.previewwindow
                end
            },
            {
                "%r",
                cond = function()
                    return vim.bo.readonly
                end
            },
            {
                "%q",
                cond = function()
                    return vim.bo.buftype == "quickfix"
                end
            }
        },
        -- lualine_c = {"%f %y %m"},
        -- lualine_c = {
        --   {"filename", file_status = false, path = 0}
        -- },
        lualine_c = { "aerial" },
        lualine_x = {},
        lualine_y = {
            {
                search_result,
                color = { fg = colors.grey, bg = colors.nord3 }
            },
            {
                "filetype",
                color = { fg = colors.grey, bg = colors.nord3 }
            }
        },
        lualine_z = {
            {
                "%l:%c",
                color = { fg = colors.grey, bg = colors.nord3 }
            },
            {
                "%p%%/%L",
                color = { fg = colors.grey, bg = colors.nord3 }
            }
        }
    },
    tabline = {
        lualine_a = {
            {
                "filename",
                file_status = false,
                color = { fg = colors.grey, bg = colors.nord2 },
                path = 2
            }
        },
        -- lualine_z = {
        --     {
        --         "b:coc_git_blame",
        --         color = { fg = colors.grey, bg = colors.nord1 }
        --     }
        -- }
        -- lualine_z = {
        --   {
        --     "b:vista_nearest_method_or_function",
        --     color = {fg = colors.grey}
        --   }
        -- }
        -- lualine_z = {
        --     {
        --         "tabs",
        --         -- max_length = vim.o.columns / 3, -- Maximum width of tabs component.
        --         -- Note:
        --         -- It can also be a function that returns
        --         -- the value of `max_length` dynamically.
        --         mode = 2, -- 0: Shows tab_nr
        --         -- 1: Shows tab_name
        --         -- 2: Shows tab_nr + tab_name
        --
        --         -- tabs_color = {
        --         --     -- Same values as the general color option can be used here.
        --         --     active = "lualine_{section}_normal", -- Color for active tab.
        --         --     -- inactive = "lualine_{section}_inactive" -- Color for inactive tab.
        --         -- }
        --     }
        -- }
    }
}
